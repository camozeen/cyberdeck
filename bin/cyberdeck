#!/bin/bash

spushd () {
    command pushd "$@" > /dev/null
}

spopd () {
    command popd "$@" > /dev/null
}

start_redis () {
  REDIS_STATUS=$(sudo docker ps | tail -n+2 | tr -s ' ' | cut -d' ' -f2)

  if [[ -z "$REDIS_STATUS" ]]; then
    sudo docker run --name cyberdeck-redis -p 6379:6379 -d redis > /dev/null 2>&1
  else
    # TODO: handle this better
    echo "docker: redis container is already running"
    exit 1
  fi
}

stop_redis () {
  REDIS_CONTAINER_ID=$(sudo docker ps -q)

  if [[ ! -z "$REDIS_CONTAINER_ID" ]]; then
    sudo docker stop $REDIS_CONTAINER_ID > /dev/null 2>&1
    sudo docker rm $REDIS_CONTAINER_ID > /dev/null 2>&1
  fi
}

cleanup () {
  pm2 -s stop _cyberdeck_launch_backend_controller
  pm2 -s delete _cyberdeck_launch_backend_controller
  stop_redis
}

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

if [[ "$1" == "check" ]]; then
  echo "performing system check"
  exit 0
fi

if [[ "$1" == "update" ]]; then
  spushd $SCRIPT_DIR
    source _cyberdeck_ini_parser.sh
    spushd ..
      process_ini_file 'env.conf'
      echo "updating services"
      spushd ./services
        if [[ -d "aprs_forwarder" ]]; then
          spushd ./aprs_forwarder
            git pull origin master > /dev/null 2>&1
          spopd
        else
          git clone https://github.com/camozeen/aprs_forwarder.git > /dev/null 2>&1
        fi
      spopd
    spopd
  spopd
  exit 0
fi

spushd $SCRIPT_DIR
  source _cyberdeck_ini_parser.sh

  spushd ..

    process_ini_file 'env.conf'

    start_redis

    BASEDIR=$(get_value 'main' 'basedir') \
    CONTROLLER_PORT=$(get_value 'controller' 'port') \
      pm2 -s start bin/_cyberdeck_launch_backend_controller.sh

    sleep 1

    CONTROLLER_PORT=$(get_value 'controller' 'port') \
    CONTROLLER_HOST=$(get_value 'controller' 'host') \
      ./bin/_cyberdeck_launch_frontend_console.sh

  spopd
spopd

trap cleanup EXIT
